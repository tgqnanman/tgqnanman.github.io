<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[markdown的学习]]></title>
      <url>%2F2016%2F10%2F25%2Fmarkdown%E7%9A%84%E5%AD%A6%E4%B9%A0%2F</url>
      <content type="text"><![CDATA[Markdown 是一种轻量级标记语言，比html等要来的直观、好接受一点。总的来说就是一种利用各种标记格式来展示好的界面、同时可以在相关的markdown编辑器网站（下面我列了两个常用的）转换成html、pdf等格式文件。基本写一遍就熟悉用法了，挺好学的。 Markdown的网站编辑器（同时讲解标记用法） [x] Cmd Markdown 编辑阅读器 [x] 我经常在这网站上编辑 #举很多栗子 ##这些我自己常用的markdown标记、足以学习： 标题H1-H6： 小标题H4的写法 #### 小标题H4 字体 斜体的写法:*斜体* 粗体的写法:**粗体** 删除线的写法&lt;s&gt;删除线&lt;/s&gt; 注明文本的写法 &gt; 注明文本 下标2、 下标&lt;sub&gt;2&lt;/sub&gt; 上标2、 上标&lt;sup&gt;2&lt;/sup&gt; 链接 锚点链接 [锚点链接](https://github.com/tgqnanman) https://github.com &lt;https://github.com&gt; 代码格式 123 function test()&#123; console.log("Hello world!");&#125; 图片 引入图片格式： ![picture描述](picture.jpg) 值得一说的是这图片链接地址不能是本地的（就不能是电脑上的文件）、要是网上的图片链接，当然，可以上传到github然后图片地址名为你的图片名 “picture.jpg”就行了 列表（偷个懒，直接上图了）* 表格 行内代码]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Dos & Gitbash命令]]></title>
      <url>%2F2016%2F08%2F21%2FDos-Gitbash%E5%91%BD%E4%BB%A4%2F</url>
      <content type="text"><![CDATA[dos命令，有时还是要了解一下的，下面列举了一下自己常用的命令还有常用的版本控制命令gitbash命令行的使用cmd中： 查看系统版本 ver 清空命令 cls 更改文件名 ren 旧名 新名（shell中 mv 旧名 新名） 査看文本内容（gitbash中 cat 文本） type 文件名 査看某个命令的帮助 命令 /? 新建文本 echo &gt;xx.txt 补充内容 echo mmm&gt;&gt;xx.txt 退出cmd exit(shell中则是quit) 直接进入别的盘 e: 复制文件到e盘（hw.class在c:/Users/TGQ/Desktop里）(输命令也要在Desktop里) copy hw.class e: 屏幕键盘osk 服务项（window.update系统更新设置）services.msc 注册表regedit.exe 自制‘栗子’： 完全cmd命令编译HELLO WORLD!win+R调出命令提示符 键入cmd12345echo class hw &#123;public static void main(String[] args )&#123; System.out.println("HELLO WORLD!"); &#125;&#125;&gt;&gt;hw.txtren hw.txt hw.javajavac hw.javajava hw//HELLO WORLD! cmd登录ftp中： 查看当下目录 lcd 更改下载目录 lcd c:/Users/TGQ/Desktop 退出ftp quit或bye xshell中： 清除屏幕命令 clear 复制 cp 查看文件内容 cat 文件名 用户登录信息 last 时间 date 查看系统版本 unname 删除非空文件 rm -rf 文件名 重命名文件夹 mv 旧名 新名 进入vi编辑 vi 文件（例如 hw.java）不保存退出 ：q强制性退出 ：q!保存并退出 ：wq 查看当前文件ls(或者dir) 退出一级目录cd ..(cmd中有无空格都行) 自制‘栗子’： 综合应用cmd的登录ftp与xshell的vi编译 dos–&gt;cmd–&gt;ftp open address user-name password 之后上传压缩文件到阿里云服务器 put ds.zip(或 ds.rar) get xx(同理下载命令) xshell登录到阿里云服务器,并解压ds.zip到ds/list文件夹中 rar x ds.rar (或 unzip ds.zip) 若没有编译，则 javac -encoding GBK *.java 回到根目录，执行java程序 cd ~ （~表示根目录） java ds/list/TestList gitBash： 进入 cd 创建（win中还可用md） mkdir 删除（win中用rd删除） rm 文件名.txt(bash中不能使用) del 误删除，恢复 git checkout -- 文件名 査看当前文件 dir（或者ls） 往文本添加内容 echo 内容&gt;&gt;文件名.txt 获取到版本号 git reflog 査看文件内容 cat 文本 命令是用于显示当前的目录pwd 把当前目录变成git可以管理的仓库，如下：git init 这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了 自制’栗子’: gitbash小实例版本库创建成功后： 把文件添加到版本库 第一步：用命令git add告诉Git，把文件添加到仓库： $ git add readme.txt 第二步：用命令git commit告诉Git，把文件提交到仓库。 $ git commit -m &quot;new file info&quot; 下图是详细步骤：1. cd e:\git_code 命令到版本库文件夹下（我是在e盘下创建了git_code文件夹，前面说过了） 2. touch reader.txt 命令创建一个新的txt文本：reader.txt 。 3. git add reader.txt 命令，告诉Git，把文件添加到仓库 4. echo &quot;I love you&quot;&gt;&gt;reader.txt 命令往reader.txt文本中添加内容I love you 字符串。 （查看修改的内容:git diff ） 5. 查看reader.txt文本内容 :cat reader.txt 。 6. 把所有文件添加到版本库(注意：add后+空格+ . ): git add . 7. 最后使用 git status 命令查看仓库当前状态。 关于版本的回退与恢复：使用版本回退操作:git reset –hard HEAD^版本号回退，使用命令方法：git reset –hard 版本号获取版本号：git reflog]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[git-bash总结]]></title>
      <url>%2F2016%2F07%2F21%2Fgit-bash%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[Git Bash软件基础命令:零、建立本地与远程仓库的连接$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;本地找到.ssh目录，有id_rsa和id_rsa.pub两个文件，SSH Key的秘钥对，id_rsa是私钥，id_rsa.pub是公钥，可以放心地告诉任何人。登陆GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。 一、创建空目录 mkdir newFile 新建一个文件夹 cd newFile 进入文件夹 pwd 显示当前目录 二、本地创建版本库（repository） git init newFile文件夹内有一个.git的目录，这个目录是Git来跟踪管理版本库的 Initialized empty Git repository in /Users/TGQ/newFile/.git/ ls -ah .git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见 三、提交文件到版本库 git add . （添加到工作区） git commit -m &quot;提交的备注&quot; （提交到暂存区） git status 掌握仓库当前的状态（文件被修改过） git diff 查看修改内容 四、版本回退 git log 提交日志 git reset --hard HEAD^（或者是commit_id） 回退上一个版本 git reflog 命令历史 cat readme.txt 查看txt文件内容 在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^ 五、工作区与暂存区工作区（文件夹）有一个隐藏目录.git，这个不算工作区，而是Git的版本库。 Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。 git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。 一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的git status： 六、撤销修改 git checkout -- file 可以丢弃工作区的修改 git reset HEAD file ==》 1 可以丢弃暂存区的修改 版本回 退：提交了不合适的修改到版本库时，想要撤销本次提交 七、删除文件 从版本库中删除该文件，那就用命令git rm删掉，并且git commit git checkout 用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原” 八、远程库的管理git remote add origin git@server-name:path/repo-name.git 关联远程库 git push -u origin master 第一次推送master分支的内容到远程库 git push origin maste 之后推送最新修改； 九、克隆远程库git clone git@github.tgqnnanman/kkkk.git 这里是用的ssh协议，也有https可选 十、杂杂的######偷懒命令 git lg 提交的情况-别名 git config --global alias.lg &quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot; git last 最后一次提交情况-别名 git config --global alias.last &#39;log -1&#39; 分支系列命令分支系列命令查看分支：git branch 创建分支：git branch &lt;name&gt; 切换分支：git checkout &lt;name&gt; 创建+切换分支：git checkout -b &lt;name&gt; 合并某分支到当前分支：git merge &lt;name&gt; 删除分支：git branch -d &lt;name&gt; 在分支提交到远程库部骤：git add. =&gt; git commit -m &quot;注释&quot; =&gt; git push origin &lt;当前分支名&gt;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Chrome的调试工具]]></title>
      <url>%2F2016%2F07%2F21%2FChrome%E7%9A%84%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%2F</url>
      <content type="text"><![CDATA[Chrome的调试 Ctrl+shift+C、F12或者右键开发者工具–&gt;打开调试器 调试器的黑色主题 在chrome商店下载安装主题：安装地址 chrome地址栏输入：chrome://flags 找到experiments关键字：启用开发者工具实验。 打开调试器（F12），点击设置（setting啥的）：在Experiments中，选中Allow custom UI themes。 然后重启，打开调试器，你会发现~炫酷的黑色主题 有关调试的技巧（自己整理了一下）、来自原创网站 内置于Window对象中的alert方法(被玩坏了的) alert调试方式弹出的调试信息， 弹窗会遮挡部分页面内容。另一方面，程序逻辑中添加类似”alert(xxxxx)”这样的语句，会阻碍页面的继续渲染。 现在出现”console.log(xxxx)”的形式，在控制台打印调试信息，而不直接影响页面显示。以IE为例，它看起来像这样： 好吧，再见丑陋的alert弹出框。而以Chrome浏览器为首的后起之秀，为Console扩展了更丰富的功能： 还有一些其的打印功能 断点调试 附上调试代码(代码很简单，就是定义一个函数，传入两个数，分别加上一个乱七八糟的随机整数后，再返回两个数的总和。以Chrome开发者工具为例，我们来看一下JS断点调试的基本方法。)： 12345678910111213141516 &lt;script&gt; (function () &#123; function sum(a, b) &#123; console.log('传入实参: a=' + a + ', b=' + b); var c = Math.random() * 10; c = parseInt(c); console.log('被加的随机数为：' + c); a += c; b += 2 * c; console.log('变化后的a、b=' + a + ', b=' + b); return a + b; &#125; console.log(sum(10, 20)); &#125;)();&lt;/script&gt; 设置断点的作用（查看相应变量的变化图中粉红色区域） 打开Sources面板后其实会在界面中看到如下内容，我们跟着鼠标轨迹逐一看看都是什么意思： 从左到右，各个图标表示的功能分别为： - [x] Pause/Resume script execution：暂停/恢复脚本执行（程序执行到下一断点停止）。 - [x] Step over next function call：执行到下一步的函数调用（跳到下一行）。 - [x] Step into next function call：进入当前函数。 - [x] Step out of current function：跳出当前执行函数。 - [x] Deactive/Active all breakpoints：关闭/开启所有断点（不会取消）。 - [x] Pause on exceptions：异常情况自动断点设置。 到此，断点调试的功能键介绍得差不多了，接下来我们就可以一行一行去看我们的程序代码，查看每一行执行完毕之后，我们各个变量的变化情况了，如下图所示： 这里要强调一下，调试过程，先点击右上角的停止按钮，如果还调试不行，就在 左边页面刷新一下，然后如下图：在设置的两个断点间按 F10 便会不断进行下一步 其余几个功能键，稍微改动一下测试代码，用一张gif图来演示他们的使用方法： DOM断点调试当节点内部子节点变化时断点（Break on subtree modifications） Event Listener Breakpoints事件监听器断点，即根据事件名称进行断点设置。当事件被触发时，断点到事件绑定的位置。事件监听器断点，列出了所有页面及脚本事件，包括：鼠标、键盘、动画、定时器、XHR等等。极大的降低了事件方面业务逻辑的调试难度。演示实例演示了当click事件被触发时和当setTimeout被设置时的断点效果。实例显示，当选中click事件断点之后，两个按钮的被点击时都触发了断点，而当setTimeout被设置时，“Set Timer”断点被触发。 console的相关方法（整理完都是泪） console.log() 接收不定参数，参数间用逗号分隔，最终会输出会将它们以空白字符连接。 12console.log('hi','hello') //hi hello 控制台（表格形式输出）： 12var data = [&#123;'品名': '杜雷斯', '数量': 4&#125;, &#123;'品名': '冈本', '数量': 3&#125;];console.table(data); 控制台（条件判断输出）： 12console.assert(3&gt;2,'不满足条件') //undefined 控制台（程序运行时间）： 123456console.time('ddd') var dd = function ddd() &#123;return 1+3;&#125;(); dd; console.timeEnd('ddd')//ddd:0.032ms 12345console.time('ddd');(function dd() &#123;return 1+3;&#125;)();console.timeEnd('ddd');//ddd: 0.022ms 如果不用内置console.time的话： 1234567var start=new Date().getTime();var array= new Array(1000000);for (var i = array.length - 1; i &gt;= 0; i--) &#123; array[i] = new Object();&#125;;console.log(new Date().getTime()-start);//236 console.log(Date()) 1//Sun Oct 16 2016 22:21:36 GMT+0800 (中国标准时间) shift+Enter可以使控制台换行 控制台（返回属性名组成的数组和属性值的数组） 12345var tboy=&#123;name:'wayou',gender:'unknown',hobby:'opposite to the gender'&#125;;keys(tboy);//["name", "gender","hobby"]values(tboy);//["wayou", "unknown", "opposite to the gender"] 格式化打印{ } Chrome的开发者工具有一段嵌入的美化代码，它可以帮你返回一段最小化的且格式易读的代码。这个漂亮的印刷按钮在你正确打开文件之后的Sources标签下的左下角。 最后扯两句，这chrome.md文件 整理的有点苦逼，不想再commit更新了！！！]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[webstorm与sublime]]></title>
      <url>%2F2016%2F05%2F21%2F%E7%BC%96%E8%BE%91%E5%99%A8%E9%85%8D%E7%BD%AE%2F</url>
      <content type="text"><![CDATA[软件配置（原创版，持续更新）sublime的配置1.软件的下载与注册 在官网下载sublime text3之后，有需要就网上找注册码.然后在 HELP–&gt;Licence 黏贴你的注册码就行了。 2.安装install package 打开控制台(一般是CTRL+’) （适用于 Sublime Text3） 然后复制黏贴以下代码 import urllib.request,os;pf=’Package Control.sublime-package’;ipp=sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));open(os.path.join(ipp,pf),’wb’).write(urllib.request.urlopen(‘http://sublime.wbond.net/&#39;+pf.replace(‘ ‘,’%20’)).read()) 测试是否成功安装ctrl+shift+p输入ins可进（prefense、）安装插件都是ctrl+shift+p，再输入ins，确定之后，再输入你要安装的插件名称，点击完之后，等待sublime最下面的显示安装进度，再重启就行了 3.汉化： ctrl+shift+p 安装插件chinese 然后重启，在HELP–&gt;Language切换中文 4.设置html文件在浏览器中快捷打开： 安装插件 view in browser 在SublimeText下打开该路径：preferen 按键绑定-用户 在” ] “前输入以下代码：{ “keys”: [“ctrl+你想要设置的键（字母B，A啥的都可以）”], “command”: “open_in_browser” } 5.如何快速创建html头部格式文件 安装插件：ement 创建时：先CTRIL+N，创建一个文件先，然后CTRL+S保存文件（命名为xx.html） 然后空文件输入 html:5 最后按一下Tab键如图： 6.css颜色框： 安装color picker插件 进入prefence 打开 window default 这里是设置快捷键打开：{ “keys”: [“ctrl+j”], “command”: “color_pick” } 7.左侧目录树的显示： 安装插件 advanceNewFile 安装完之后，同样和别的安装插件步骤一样，重启。再在 sublime左上角的‘文件’ 选项里，选择 ‘文件夹’ ，再任意打开一个文件夹就行了 8.代码提示（例如back 然后提示background） 安装插件SublimeCodeIntel 9.格式化html/css/js代码（也就是排列整齐）（还要安装node这里就不详说了） 安装插件 html/css/js prettify 进入此插件的 set plugin options 设置路径：”node_path”: { 例如我自己的路径： “windows”: “E:/学习/sublime text3/Sublime Text 3/Packages/node.exe”, 测试，全选要格式化的代码，然后右键，Prettify code 10.平时一些偷懒操作1234输入 div*2 再按 Tab键会出现 &lt;div&gt;&lt;/div&gt; &lt;div&gt;&lt;/div&gt; 类似的还有：E元素名（div、p）；12&lt;div&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt; id和class可以连着写，div#content.column1&lt;div id="content" class="column"&gt;&lt;/div&gt; EN多项元素（ul#nav&gt;li5&gt;a）1234567&lt;ul id="nav"&gt; &lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt; 还有的类似，慢慢就懒懂起来的了~~ 代码缩进：ctrl+ { 万一不小心把菜单栏弄隐藏了：调出顶部菜单栏：ctrl+shift+p、再输view 11.有些时候要设置Path路径，就是自己的文件夹名字改变等等之类的 例如我自己的（其中注意路径的斜杠是反着的 \）： sublimetext会有提示更改软件里的path 更改系统变量Path: E:\学习\sublime text3\Sublime Text 3\Packages\node_modules\npm\bin E:\学习\sublime text3\Sublime Text 3\Packages ———————————————————webstorm的配置 如何安装： 官网下载2016.2版本，然后破解的话，网上搜注册码激活咯 主题导入： File–&gt;import settings–&gt;选择文件：自己下载的本地文件 settings.jar 代码和界面的同步编写 先在chrome安装JetBrains IDE Support插件 然后打开webstorm软件，右键Debugger(然后会自动弹出google浏览器（default的浏览器），在webstorm上编代码，浏览器都会同步更改)]]></content>
    </entry>

    
  
  
</search>
