[{"title":"Js深入浅出小结（三）","url":"http://yoursite.com/2016/04/03/Js深入浅出小结（三） /","content":"<ul>\n<li>创建数组-字面量<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var students = [&#123;name:&apos;tom&apos;,age:27&#125;,&#123;name:&apos;Jenny&apos;,age:26&#125;]</div><div class=\"line\">var commasArr1 = [1,,2];\t// 1,undefined,2</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>-创建数组-new Array<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = new Array();</div></pre></td></tr></table></figure></p>\n<ul>\n<li>数组元素增删<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [];</div><div class=\"line\">arr[0] = 1;</div><div class=\"line\">arr[1] = 2;</div><div class=\"line\">arr.push(3);</div><div class=\"line\">arr;\t// [1,2,3]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr[arr.length] = 4;\t// equal to arr.push(4);</div><div class=\"line\">arr;\t//[1,2,3,4]</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr.unshift(0);</div><div class=\"line\">arr;\t//[0,1,2,3,4];</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">delete arr[2];</div><div class=\"line\">arr;\t// [0,1,undefined,3,4]</div><div class=\"line\">arr.length;\t//5</div><div class=\"line\">2 in arr;\t//false</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr.length -=1;</div><div class=\"line\">arr;\t//[0,1,undefined,3]</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr.pop();</div><div class=\"line\">arr;\t//[0,1,undefined]</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr.shift();</div><div class=\"line\">arr;\t// [1,undefined]</div></pre></td></tr></table></figure>\n<ul>\n<li>数组迭代<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var i = 0, n = 10;</div><div class=\"line\">var arr = [1,2,3,4,5];</div><div class=\"line\">for(; i&lt;n; i++)&#123;</div><div class=\"line\">\tconsole.log(arr[i]);\t//1,2,3,4,5</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(i in arr)&#123;</div><div class=\"line\">\tconsole.log(arr[i]);\t//1,2,3,4,5</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array.prototype.x = 6;</div><div class=\"line\">for(i in arr)&#123;</div><div class=\"line\">\tconsole.log(arr[i]);\t//1,2,3,4,5,6</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">for(i in arr)&#123;</div><div class=\"line\">\tif(arr.hasOwnProperty(i))&#123;</div><div class=\"line\">\t\tconsole.log(arr[i]);\t//1,2,3,4,5</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>稀疏数组并不今有从0开始的连续索引，一般length属性值比实际元素个数大。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr1 = [undefined];</div><div class=\"line\">var arr2 = new Array(1);</div><div class=\"line\">0 in arr1;\t//true</div><div class=\"line\">0 in arr2;\t//false</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr1.length = 100;</div><div class=\"line\">arr1[99] = 123;</div><div class=\"line\">99 in arr1;\t//true</div><div class=\"line\">98 in arr1;\t//false</div></pre></td></tr></table></figure>\n<ul>\n<li>将数组转为字符串 Array.prototype.join<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [1,2,3];</div><div class=\"line\">arr.join();\t// &quot;1,2,3&quot;</div><div class=\"line\">arr.join(&quot;-&quot;);\t// &quot;1-2-3&quot;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function repeatString(str, n)&#123;</div><div class=\"line\">\treturn new Array(n+1).join(str);</div><div class=\"line\">&#125;</div><div class=\"line\">repeatString(&quot;a&quot;,3);\t// &quot;aaa&quot;</div><div class=\"line\">repeatString(&apos;Hi&apos;,5);\t// &quot;HiHiHiHiHi&quot;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>将数组逆序 Array.prototype.reverse</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [1,2,3];</div><div class=\"line\">arr.reverse();\t// [3,2,1]</div><div class=\"line\">arr;\t// [3,2,1]</div></pre></td></tr></table></figure>\n</li>\n<li><p>排序</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [&quot;a&quot;,&apos;d&apos;,&apos;b&apos;,&apos;c];</div><div class=\"line\">arr.sort();\t//\t[&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr01 = [13,24,51,3]</div><div class=\"line\">arr01.sort(function(a,b)&#123;</div><div class=\"line\">\treturn a-b;</div><div class=\"line\">&#125;);\t// [3,13,24,51]</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr02 = [&#123;age:25&#125;,&#123;age:39&#125;];</div><div class=\"line\">arr02.sort(function(a,b)&#123;</div><div class=\"line\">\treturn a.age - b.age;</div><div class=\"line\">&#125;)</div><div class=\"line\">arr02.forEach(function(item)&#123;</div><div class=\"line\">\tconsole.log(&apos;age:&apos;,item.age)</div><div class=\"line\">&#125;);\t//age:25 age:39</div></pre></td></tr></table></figure>\n<ul>\n<li>数组合并    Array.prototype.concat<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [1,2,3];</div><div class=\"line\">arr.concat(4,5);\t//[1,2,3,4,5]</div><div class=\"line\">arr;\t// [1,2,3]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr.concat([4,5],6);\t//[1,2,3,4,5,6]</div><div class=\"line\">arr.concat([1,[2,3]]);\t//[1,2,3,1,[2,3]]</div></pre></td></tr></table></figure>\n<ul>\n<li><p>返回部分数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [1,2,3,4,5];</div><div class=\"line\">arr.slice(1,3);\t// [2,3]</div><div class=\"line\">arr.slice(1);\t//[2,3,4]</div><div class=\"line\">arr.slice(1,-1);\t// [2,3,4]</div></pre></td></tr></table></figure>\n</li>\n<li><p>数组拼接</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [1,2,3,4,5]</div><div class=\"line\">arr.splice(2);\t// returns [3,4,5]</div><div class=\"line\">arr;\t//[1,2]</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr = [1,2,3,4,5];</div><div class=\"line\">arr.splice(1,1,&apos;a&apos;,&apos;b&apos;);\t//returns [2]</div><div class=\"line\">arr;\t//[1,&apos;a&apos;,&apos;b&apos;,3,4,5]</div></pre></td></tr></table></figure>\n<ul>\n<li><p>数组遍历 Array.prototype.forEach</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr =[1,2,3,4,5];</div><div class=\"line\">arr.forEach(function(x,inde,a)&#123;</div><div class=\"line\">\tconsole.log(x + &apos;|&apos; + index + &apos;|&apos; +(a === arr));</div><div class=\"line\">&#125;);\t// 1|0|true 2|1|true ...  5|4|true</div></pre></td></tr></table></figure>\n</li>\n<li><p>数组映射</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [1,2,3];</div><div class=\"line\">arr.map(function(x)&#123;</div><div class=\"line\">\treturn x + 10;</div><div class=\"line\">&#125;);\t//[11,12,13]</div><div class=\"line\">arr;\t//[1,2,3]</div></pre></td></tr></table></figure>\n</li>\n<li><p>数组过滤</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [1,2,3,4,5,6,7,8,9]</div><div class=\"line\">arr.filter(function(x,index)&#123;</div><div class=\"line\">\treturn index%3 === 0 || x &gt;= 8;</div><div class=\"line\">&#125;);\t// returns [1,4,7,8,9]</div><div class=\"line\">arr;\t// [1,2,3,4,5,6,7,8,9]</div></pre></td></tr></table></figure>\n</li>\n<li><p>数组判断    Array.prototype.every&amp;some</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [1,2,3,4,5];</div><div class=\"line\">arr.every(function(x)&#123;</div><div class=\"line\">\treturn x &lt; 10;</div><div class=\"line\">&#125;);\t//true</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr.some(function(x)&#123;</div><div class=\"line\">\treturn x ===3;</div><div class=\"line\">&#125;);\t//true</div></pre></td></tr></table></figure>\n<ul>\n<li><p>Array.prototype.reduce</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr = [3,9,6]</div><div class=\"line\">var max = arr.reduce(function(x,y)&#123;</div><div class=\"line\">\tconsole.log(x + &apos;|&apos; + y);</div><div class=\"line\">\treturn x &gt; y?x:y;</div><div class=\"line\">&#125;);\t// 3|9 9|6 </div><div class=\"line\">max;\t//9</div></pre></td></tr></table></figure>\n</li>\n<li><p>数组检索</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var arr = [1,2,3,2,1];</div><div class=\"line\">arr.indexOf(2);\t//1</div><div class=\"line\">arr.indexOf(99);\t//-1</div><div class=\"line\">arr.indexOf(1,1);\t// 4</div><div class=\"line\">arr.lastIndexOf(2);\t//3</div></pre></td></tr></table></figure>\n</li>\n<li><p>判断是否为数组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array.isArray([]);\t//true</div><div class=\"line\">[] instanceof Array;\t//true</div><div class=\"line\">(&#123;&#125;).toString.apply([]) === &apos;[object Array]&apos;;\t//true</div><div class=\"line\">[].constructor === Array;\t// true</div></pre></td></tr></table></figure>\n</li>\n<li><p>数组 VS 一般对象</p>\n</li>\n</ul>\n<p>1、相同：都可能继承，数组是对象，对象不一定是数组。都可以当做对象添加删除属性<br>2、不同：数组自动更新length; 按索引访问数组常常比访问一般对象属性明显迅速; 数组对象继承Array.prototype上的大量数组操作方法</p>\n<ul>\n<li>字符串和数组<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str = &apos;hello world&apos;</div><div class=\"line\">str.charAt(0);\t// &apos;h&apos;</div><div class=\"line\">str[1];\t// e</div><div class=\"line\">Array.prototype.join.call(str,&apos;_&apos;);\t// &quot;h_e_l_....&quot;</div></pre></td></tr></table></figure></li>\n</ul>\n","categories":[],"tags":["Js深入浅出"]},{"title":"Js深入浅出小结（二）","url":"http://yoursite.com/2016/04/02/Js深入浅出小结（二）/","content":"<ul>\n<li><p>无块级作用域</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;a:1, b:2&#125;\t//SynatxError:\tUnexpected token:</div><div class=\"line\">var o = &#123;a:1, b:2&#125;;\t//ok</div></pre></td></tr></table></figure>\n</li>\n<li><p>try catch语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">try&#123;</div><div class=\"line\">\ttry &#123;</div><div class=\"line\">\t\tthrow new Error(&apos;oops&apos;;)</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tfinally&#123;</div><div class=\"line\">\t\tconsole.log(&apos;finally&apos;);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\tcatche (ex)&#123;</div><div class=\"line\">\t\tconsole.error(&quot;outer&quot;, ex.message);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;\t// finally  outer  opps</div></pre></td></tr></table></figure>\n</li>\n<li><p>for…in语句<br>1、顺序不确定<br>2、enumerable为false 时不会出现<br>3、for in对象属性时受原型链影响</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var p;</div><div class=\"line\">var obj = &#123;x:1, y:2&#125;;</div><div class=\"line\">for(p in obj)</div></pre></td></tr></table></figure>\n</li>\n<li><p>with语句<br>1、让JS引擎优化更难<br>2、可读性差<br>3、可被 变量定义代替<br>4、严格模式下被 禁用</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">with</span>(&#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;&#123;)&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">with</span>(<span class=\"built_in\">document</span>.forme[<span class=\"number\">0</span>])&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(name.value);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> form = <span class=\"built_in\">document</span>.forms[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(form.name.value);</div></pre></td></tr></table></figure>\n<ul>\n<li>严格模式是一种特殊的执行模式，它修复了部分语言上的不足，提供更强的错误检查，并增强安全性。<br>1、不允许用with<br>2、所有变量必须声明，赋值给为声明的变量报错，而不是陷式创建军全局变量。<br>3、eval中的代码不能创建军eval所在作用域下的变量，函数。而是为eval单独创建一个作用域，并在eval返回时丢弃。<br>4、函数中得特殊对象arguments是静态副本，而不像非严格模式那样，修改arguments或修改参数变理会相互影响。<br>5、删除configurable = false的属性时报错，而不是忽略<br>6、禁止八进制字面量，如010（八进制的8）<br>7、eval, arguments变为关键字，不可作为变量名，函数名等。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func01</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"><span class=\"meta\">\t'use strict'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\">function func02()&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>key与value<br>对象中包含一系列属性，这些属性是无序的。每个属性都有一个字符串key和对应的value.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123; x: 1, y:2&#125;;</div><div class=\"line\">oobj.x;\t//1</div><div class=\"line\">obj.y;\t//2</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj02 = &#123;&#125;;</div><div class=\"line\">ob02j[1] = 1;</div><div class=\"line\">obj02[&apos;1&apos;] = 2;</div><div class=\"line\">obj02;\t//Object&#123;1: 2&#125;</div><div class=\"line\">obj02[&#123;&#125;] = true;</div><div class=\"line\">obj02[&#123;x: 1&#125;] = true;</div><div class=\"line\">obj02;\t//Object&#123;1:2, [object Object]:true&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>对象创建-字面量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj03 = &#123; x:1, y:2 &#125;;</div><div class=\"line\">var obj04 = &#123;</div><div class=\"line\">\tx:1,</div><div class=\"line\">\ty:2,</div><div class=\"line\">\to: &#123;</div><div class=\"line\">\t\tz:3,</div><div class=\"line\">\t\tn:4</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>对象创建-new/原型链<br><img src=\"/images/对象创建-原型链.png\" alt=\"对象创建-原型链\" title=\"对象创建-原型链\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo()&#123;&#125;</div><div class=\"line\">foo.prototype.z = 3;</div><div class=\"line\">var obj = new foo();</div><div class=\"line\">obj.y = 2;</div><div class=\"line\">obj.x = 1;</div><div class=\"line\">obj.x;\t// 1</div><div class=\"line\">obj.y;\t// 2</div><div class=\"line\">obj.z;\t// 3</div><div class=\"line\">typeof obj.toString;\t// &apos;function&apos;</div><div class=\"line\">&apos;z&apos; in obj;\t//true</div><div class=\"line\">obj.hasOwnProperty(&apos;z&apos;);\t// false</div></pre></td></tr></table></figure>\n</li>\n<li><p>对象创建- Object.create<br><img src=\"/images/对象创建-create.png\" alt=\"对象创建-create\" title=\"对象创建-create\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = Object.create(&#123;x: 1&#125;);</div><div class=\"line\">obj.x; \t// 1</div><div class=\"line\">typeof obj.toString \t//&apos;function&apos;</div><div class=\"line\">obj.hasOwnProperty(&apos;x&apos;);\t//false</div><div class=\"line\">var obj = Object.create(null);</div><div class=\"line\">obj.toString;\t//undefined</div></pre></td></tr></table></figure>\n</li>\n<li><p>序列化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123;x:1,y: true, z:[1,2,3], nullVal: null, c: new Date(), val: undefined, b: Infinity&#125;;</div><div class=\"line\">JSONstringify(obj);\t// &quot;&#123;&quot;x&quot;:1, &quot;y&quot;:true, &quot;z&quot;:[1,2,3], &quot;nullVal&quot;:null, &quot;c&quot;:&quot;2015-01-20T14:15...&quot;, &quot;b&quot;: null&#125;&quot;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">obj = JSON.parse(&apos;&#123;&quot;x&quot;: 1&#125;&apos;&apos;);</div><div class=\"line\">obj.x;\t// 1</div></pre></td></tr></table></figure>\n<ul>\n<li><p>序列化-自定义</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = &#123;</div><div class=\"line\">\tx:1,</div><div class=\"line\">\ty:2,</div><div class=\"line\">\to:&#123;</div><div class=\"line\">\t\to1: 1,</div><div class=\"line\">\t\to2: 2,</div><div class=\"line\">\t\ttoJSON: function()&#123;</div><div class=\"line\">\t\t\treturn this.o1 + this.o2;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">JSON.stringify(obj);\t// &quot;&#123;&quot;x&quot;:1, &quot;y&quot;:2, &quot;o&quot;:3&#125;&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>属性枚举</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var o = &#123;x:1, y:2,z:3&#125;;</div><div class=\"line\">&apos;toString&apos; in o;\t//true</div><div class=\"line\">o.propertyIsEnumerable(&apos;toString&apos;);\t//false</div><div class=\"line\">var key;</div><div class=\"line\">for (key in o)&#123;</div><div class=\"line\">\tconsole.log(key);\t// x, y, z</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var obj = Object.create(o);</div><div class=\"line\">obj.a = 4;</div><div class=\"line\">var key;</div><div class=\"line\">for(key in obj)&#123;</div><div class=\"line\">\tconsole.log(key);\t//a,x,y,z</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>属性getter/setter方法<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">var man = &#123;</div><div class=\"line\">\tname: &quot;Bosn&quot;,</div><div class=\"line\">\tweibo: :@Bosn,</div><div class=\"line\">\tget age()&#123;</div><div class=\"line\">\t\treturn new Date().getFullYear() - 1988;</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\tget age(val)&#123;</div><div class=\"line\">\t\tconsole.log(&apos;Age can\\&apos;t be set to&apos; + val);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">conslole.log(man.age);\t// 27</div><div class=\"line\">man.age = 100;\t//Age can&apos;t be set to 100</div><div class=\"line\">console.log(man.age);\t// still 27</div></pre></td></tr></table></figure>\n</li>\n</ul>\n","categories":[],"tags":["Js深入浅出"]},{"title":"Js深入浅出小结（一）","url":"http://yoursite.com/2016/04/02/Js深入浅出小结（一）/","content":"<ol>\n<li><p>弱类型特性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">32</span>;</div><div class=\"line\">num = <span class=\"string\">'this a string'</span>;</div><div class=\"line\"><span class=\"number\">32</span> + <span class=\"number\">32</span><span class=\"string\">`;  // 64</span></div><div class=\"line\">'32' + 32`;  <span class=\"comment\">// '3232</span></div><div class=\"line\"><span class=\"string\">'32'</span> - <span class=\"number\">32</span><span class=\"string\">`;  // 0</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>巧用+/-规则转换类型</p>\n<ul>\n<li>数字： <code>num - 0</code></li>\n<li>字符串： <code>num + &#39;&#39;</code></li>\n</ul>\n</li>\n<li><p>数据类型：</p>\n<ul>\n<li>原始(基础)类型： <strong>number string boolean null undefined</strong></li>\n<li>引用类型(object 对象)： <strong>Function Array Date …</strong></li>\n</ul>\n</li>\n<li><p>a == b:</p>\n<ul>\n<li>类型不同，尝试类型转换和比较:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">null</span> == <span class=\"literal\">undefined</span>   <span class=\"comment\">// 返回true</span></div><div class=\"line\">   number == string    <span class=\"comment\">// string转number,1 == '1.0'  , 返回true</span></div><div class=\"line\">   bollean == number    <span class=\"comment\">// boolean转number  1 == ture ,返回true</span></div><div class=\"line\">   object == number | string   <span class=\"comment\">// string尝试对象转为基本类型， new String('hi') == 'hi',  返回true</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li><p>类型相同，返回true</p>\n<ol>\n<li>a === b:</li>\n</ol>\n</li>\n<li>类型不同: 返回false</li>\n<li><p>类型相同: null === null  </p>\n<pre><code>undefined ==== undefined   \nNaN ≠ NaN\nnew Object ≠ new Object\n</code></pre><ol>\n<li><p>字符串属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"string\">'string'</span>;</div><div class=\"line\"> alert(a.length);   <span class=\"comment\">// 6</span></div><div class=\"line\"> a.t = <span class=\"number\">3</span>;</div><div class=\"line\"> alert(a.t) <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>类型检测</p>\n</li>\n</ol>\n<ul>\n<li>constructor</li>\n<li>duck type</li>\n<li><p>Object.prototype</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.apply([]);\t===<span class=\"string\">`\"[object Array]\"</span></div><div class=\"line\">Object.prototype.toString.apply(function()&#123;&#125;);\t===`<span class=\"string\">\"[object Function]\"</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.prototype.toString.apply(<span class=\"literal\">null</span>);\t===<span class=\"string\">`\"[object Null]\"</span></div><div class=\"line\">Object.prototype.toString.apply(undefined);\t===`<span class=\"string\">\"[object Undefined]\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>typeof</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">typeof 100;\t// \"number\"</div><div class=\"line\">typeof true;\t// \"boolean\"</div><div class=\"line\">typeof function;\t// \"function\"</div><div class=\"line\">typeof (undefined);\t// \"undefined\"</div><div class=\"line\">typeof new Object;\t// \"object\"</div><div class=\"line\">typeof [1,2];\t// \"object\"</div><div class=\"line\">typeof NaN;\t// \"number\"</div><div class=\"line\">typeof null;\t// \"object\"</div></pre></td></tr></table></figure>\n</li>\n<li><p>instanceof<br><img src=\"/images/instanceof (1\" alt=\"instanceof\">.png)<br><img src=\"/images/instanceof (2\" alt=\"instanceof\">.png)</p>\n</li>\n</ul>\n</li>\n<li><p>小结：typeof适合基本类型及function检测，遇到null失效，instanceof适合自定义对象，也可以用来检测原生对象，在不同iframe和window间检测时失效。[[Class]]通过{}.toString拿到，适合内置对象和基本类型，遇到null和undefined失效（IE678等返回[object Object]）</p>\n</li>\n</ul>\n<ol>\n<li>表达式</li>\n</ol>\n<ul>\n<li><p>调用表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">func();</div></pre></td></tr></table></figure>\n</li>\n<li><p>函数表达式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">return</span> x;</div><div class=\"line\">\t\t\t\t\t&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>函数声明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">function test(x)&#123;</div><div class=\"line\">\t\treturn x;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>区别</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">　   test(<span class=\"number\">1</span>);</div><div class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">　　&#125;\t<span class=\"comment\">// 输出1</span></div><div class=\"line\"></div><div class=\"line\">　　<span class=\"keyword\">var</span> test;   <span class=\"comment\">//函数变量声明提前</span></div><div class=\"line\">　　test(<span class=\"number\">1</span>);</div><div class=\"line\">　　<span class=\"keyword\">var</span> test = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">　　&#125;\t<span class=\"comment\">//报错test不是一个函数的错误</span></div></pre></td></tr></table></figure>\n<ul>\n<li><p>属性访问表达式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;<span class=\"attr\">x</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\">o.x;\t<span class=\"comment\">// 1</span></div><div class=\"line\">o[<span class=\"string\">'x'</span>]\t<span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>对象创建表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">new Function(1,2);</div><div class=\"line\">new Object</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li>运算符</li>\n</ol>\n<ul>\n<li><p>特殊运算符<br>条件运算符 ？<br>逗号运算符 ,<br>new运算符    newClsName()<br>this运算符<br>typeof运算符    typeof 100<br>void运算符    void0<br>delete运算符<br>in运算符 “document” in window<br>instanceof运算符    obj instanceof Func</p>\n</li>\n<li><p>一元    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">+num</div></pre></td></tr></table></figure>\n</li>\n<li><p>二元    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a+b</div></pre></td></tr></table></figure>\n</li>\n<li><p>三元    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">c?a:b</div></pre></td></tr></table></figure>\n</li>\n<li><p>赋值    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">x += 1</div></pre></td></tr></table></figure>\n</li>\n<li><p>比较    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a == b</div></pre></td></tr></table></figure>\n</li>\n<li><p>算术    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a - b</div></pre></td></tr></table></figure>\n</li>\n<li><p>位    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a | b</div></pre></td></tr></table></figure>\n</li>\n<li><p>逻辑    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">exp1&amp;&amp;exp2</div></pre></td></tr></table></figure>\n</li>\n<li><p>字符串    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;a&apos; + &apos;b&apos;</div></pre></td></tr></table></figure>\n</li>\n<li><p>特殊    </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">delete obj.x</div></pre></td></tr></table></figure>\n</li>\n<li><p>运算符 <code>，</code></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var value = (1,2,3);\t// value = 3</div></pre></td></tr></table></figure>\n<ul>\n<li><p>运算符 <code>delete</code><br>var obj = {};<br>Object.defineProperty(obj, ‘x’, {<br>configurable : false;<br>value : 1;<br>} );<br>delete obj.x;    //false<br>obj.x;    //1</p>\n</li>\n<li><p>运算符<code>new</code></p>\n</li>\n</ul>\n<p>function Foo(){};<br>Foo.prototype.x = 1;<br>obj.x;    // 1<br>obj.hasOwnProperty(‘x’);    // false<br>obj.<em>proto</em>.hasOwnProperty(‘x’);    // true</p>\n","categories":[],"tags":["Js深入浅出"]},{"title":"bootstrap小demo","url":"http://yoursite.com/2016/03/25/自适应的小demo/","content":"<h4 id=\"随手练习\"><a href=\"#随手练习\" class=\"headerlink\" title=\"随手练习\"></a>随手练习</h4><p>那会随便练一下手，做了个小demo的网站，用到的是bootstrap与jquery，非常简单的布局与功能实现，当然一些东西还想完善就持续更新当中，内容忽略吧，暂时没想到什么放上去，网站可供新手练习。注：因为还没放上服务器，所以打开的有点慢，但整体还是可以的，不过你想更快的话，在图片方面尽量优化一下咯。</p>\n<ul>\n<li><a href=\"https://tgqnanman.github.io/kkkk-blog\" title=\"demo在线预览\" target=\"_blank\" rel=\"external\">demo在线预览</a></li>\n</ul>\n","categories":[],"tags":["动手小demo"]},{"title":"常用的dos命令","url":"http://yoursite.com/2016/03/25/常用Dos命令/","content":"<h3 id=\"dos命令，有时还是要了解一下的，下面列举了一下自己常用的命令\"><a href=\"#dos命令，有时还是要了解一下的，下面列举了一下自己常用的命令\" class=\"headerlink\" title=\"dos命令，有时还是要了解一下的，下面列举了一下自己常用的命令\"></a>dos命令，有时还是要了解一下的，下面列举了一下自己常用的命令</h3><h3 id=\"还有常用的版本控制命令gitbash命令行的使用\"><a href=\"#还有常用的版本控制命令gitbash命令行的使用\" class=\"headerlink\" title=\"还有常用的版本控制命令gitbash命令行的使用\"></a>还有常用的版本控制命令gitbash命令行的使用</h3><h4 id=\"cmd中：\"><a href=\"#cmd中：\" class=\"headerlink\" title=\"cmd中：\"></a><strong><em>cmd中：</em></strong></h4><ol>\n<li><p>查看系统版本<br> <code>ver</code></p>\n</li>\n<li><p>清空命令<br> <code>cls</code></p>\n</li>\n<li><p>更改文件名<br> <code>ren 旧名 新名</code>（shell中 <code>mv 旧名 新名</code>）</p>\n</li>\n<li><p>査看文本内容（gitbash中 cat 文本）<br> <code>type 文件名</code></p>\n</li>\n<li><p>査看某个命令的帮助<br> <code>命令 /?</code></p>\n</li>\n<li><p>新建文本<br> <code>echo &gt;xx.txt</code></p>\n<p>补充内容<br> <code>echo mmm&gt;&gt;xx.txt</code></p>\n</li>\n<li><p>退出cmd<br> <code>exit</code>(shell中则是<code>quit</code>)</p>\n</li>\n<li><p>直接进入别的盘<br> <code>e:</code></p>\n</li>\n<li><p>复制文件到e盘（<code>hw.class在c:/Users/TGQ/Desktop里</code>）(输命令也要在Desktop里)<br> <code>copy hw.class e:</code></p>\n</li>\n<li><p>屏幕键盘<br><code>osk</code></p>\n</li>\n<li><p>服务项（window.update系统更新设置）<br><code>services.msc</code></p>\n</li>\n<li><p>注册表<br><code>regedit.exe</code></p>\n</li>\n</ol>\n<hr>\n<h5 id=\"自制‘栗子’：-完全cmd命令编译HELLO-WORLD\"><a href=\"#自制‘栗子’：-完全cmd命令编译HELLO-WORLD\" class=\"headerlink\" title=\"自制‘栗子’： 完全cmd命令编译HELLO WORLD!\"></a><em>自制‘栗子’： 完全cmd命令编译HELLO WORLD!</em></h5><h6 id=\"win-R调出命令提示符-键入cmd\"><a href=\"#win-R调出命令提示符-键入cmd\" class=\"headerlink\" title=\"win+R调出命令提示符 键入cmd\"></a>win+R调出命令提示符 键入cmd</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">hw</span> </span>&#123;public <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"built_in\">String</span>[] args )&#123; System.out.println(<span class=\"string\">\"HELLO WORLD!\"</span>); &#125;&#125;&gt;&gt;hw.txt</div><div class=\"line\">ren hw.txt hw.java</div><div class=\"line\">javac hw.java</div><div class=\"line\">java hw</div><div class=\"line\"><span class=\"comment\">//HELLO WORLD!</span></div></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"cmd登录ftp中：\"><a href=\"#cmd登录ftp中：\" class=\"headerlink\" title=\"cmd登录ftp中：\"></a><strong><em>cmd登录ftp中：</em></strong></h4><ol>\n<li>查看当下目录<br> <code>lcd</code></li>\n<li>更改下载目录<br> <code>lcd c:/Users/TGQ/Desktop</code></li>\n<li>退出ftp<br> <code>quit或bye</code></li>\n</ol>\n<hr>\n<h4 id=\"xshell中：\"><a href=\"#xshell中：\" class=\"headerlink\" title=\"xshell中：\"></a><strong><em>xshell中：</em></strong></h4><ol>\n<li><p>清除屏幕命令<br> <code>clear</code></p>\n</li>\n<li><p>复制<br> <code>cp</code></p>\n</li>\n<li><p>查看文件内容<br> <code>cat 文件名</code></p>\n</li>\n<li><p>用户登录信息<br> <code>last</code></p>\n</li>\n<li><p>时间<br> <code>date</code></p>\n</li>\n<li><p>查看系统版本<br> <code>unname</code></p>\n</li>\n<li><p>删除非空文件<br> <code>rm -rf 文件名</code></p>\n</li>\n<li><p>重命名文件夹<br> <code>mv 旧名 新名</code></p>\n</li>\n<li><p>进入vi编辑<br> <code>vi 文件（例如 hw.java）</code><br>不保存退出<br> <code>：q</code><br>强制性退出<br> <code>：q!</code><br>保存并退出<br> <code>：wq</code></p>\n</li>\n<li><p>查看当前文件<br><code>ls</code>(或者<code>dir</code>)</p>\n</li>\n<li><p>退出一级目录<br><code>cd ..</code>(cmd中有无空格都行)</p>\n</li>\n</ol>\n<hr>\n<h5 id=\"自制‘栗子’：-综合应用cmd的登录ftp与xshell的vi编译\"><a href=\"#自制‘栗子’：-综合应用cmd的登录ftp与xshell的vi编译\" class=\"headerlink\" title=\"自制‘栗子’： 综合应用cmd的登录ftp与xshell的vi编译\"></a><em>自制‘栗子’： 综合应用cmd的登录ftp与xshell的vi编译</em></h5><ul>\n<li><p>dos–&gt;cmd–&gt;ftp</p>\n<ul>\n<li><code>open  address</code></li>\n<li><code>user-name</code></li>\n<li><code>password</code></li>\n</ul>\n</li>\n<li><p>之后上传压缩文件到阿里云服务器 </p>\n<ul>\n<li><code>put ds.zip</code>(或 ds.rar)</li>\n<li><code>get xx</code>(同理下载命令)</li>\n</ul>\n</li>\n<li><p>xshell登录到阿里云服务器,并解压ds.zip到ds/list文件夹中</p>\n<ul>\n<li><code>rar x ds.rar (或 unzip ds.zip)</code></li>\n</ul>\n</li>\n<li><p>若没有编译，则 </p>\n<ul>\n<li><code>javac -encoding GBK *.java</code></li>\n</ul>\n</li>\n<li><p>回到根目录，执行java程序</p>\n<ul>\n<li><code>cd ~</code> （~表示根目录）</li>\n<li><code>java ds/list/TestList</code></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"gitBash：\"><a href=\"#gitBash：\" class=\"headerlink\" title=\"gitBash：\"></a><strong><em>gitBash：</em></strong></h4><ol>\n<li><p>进入<br> <code>cd</code>  </p>\n</li>\n<li><p>创建（win中还可用md）<br> <code>mkdir</code></p>\n</li>\n<li><p>删除（win中用rd删除）<br> <code>rm</code></p>\n</li>\n<li><p>文件名.txt(bash中不能使用)<br> <code>del</code></p>\n</li>\n<li><p>误删除，恢复<br> <code>git checkout -- 文件名</code></p>\n</li>\n<li><p>査看当前文件<br> <code>dir</code>（或者ls）</p>\n</li>\n<li><p>往文本添加内容<br> <code>echo 内容&gt;&gt;文件名.txt</code></p>\n</li>\n<li><p>获取到版本号<br> <code>git reflog</code></p>\n</li>\n<li><p>査看文件内容<br> <code>cat 文本</code></p>\n</li>\n<li><p>命令是用于显示当前的目录<br><code>pwd</code></p>\n</li>\n<li><p>把当前目录变成git可以管理的仓库，如下：<br><code>git init</code></p>\n</li>\n</ol>\n<p><em>这时候你当前testgit目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了</em></p>\n<hr>\n<h5 id=\"自制’栗子’-gitbash小实例\"><a href=\"#自制’栗子’-gitbash小实例\" class=\"headerlink\" title=\"自制’栗子’: gitbash小实例\"></a><em>自制’栗子’: gitbash小实例</em></h5><pre><code>版本库创建成功后：\n把文件添加到版本库\n第一步：用命令git add告诉Git，把文件添加到仓库：\n$ git add readme.txt\n第二步：用命令git commit告诉Git，把文件提交到仓库。\n$ git commit -m &quot;new file info&quot;\n</code></pre><h6 id=\"下图是详细步骤：\"><a href=\"#下图是详细步骤：\" class=\"headerlink\" title=\" 下图是详细步骤：\"></a><em> 下图是详细步骤：</em></h6><pre><code>1. cd e:\\git_code 命令到版本库文件夹下（我是在e盘下创建了git_code文件夹，前面说过了）\n2. touch reader.txt 命令创建一个新的txt文本：reader.txt 。\n3. git add reader.txt 命令，告诉Git，把文件添加到仓库\n4. echo &quot;I love you&quot;&gt;&gt;reader.txt 命令往reader.txt文本中添加内容I love you 字符串。\n  （查看修改的内容:git diff ）\n5. 查看reader.txt文本内容 :cat reader.txt 。\n6. 把所有文件添加到版本库(注意：add后+空格+ . ):  git add .\n7. 最后使用 git status 命令查看仓库当前状态。\n</code></pre><h6 id=\"关于版本的回退与恢复：\"><a href=\"#关于版本的回退与恢复：\" class=\"headerlink\" title=\"关于版本的回退与恢复：\"></a><em>关于版本的回退与恢复：</em></h6><p>使用版本回退操作:<code>git reset –hard HEAD^</code><br>版本号回退，使用命令方法：<code>git reset –hard 版本号</code><br>获取版本号：<code>git reflog</code></p>\n","categories":[],"tags":["git"]},{"title":"markdown的学习","url":"http://yoursite.com/2016/03/05/markdown的学习/","content":"<blockquote>\n<ul>\n<li><p>Markdown 是一种轻量级标记语言，比html等要来的直观、好接受一点。<br><br>总的来说就是一种利用各种标记格式来展示好的界面、同时可以在相关的markdown编辑器网站（下面我列了两个常用的）转换成html、pdf等格式文件。<br><br>基本写一遍就熟悉用法了，挺好学的。</p>\n</li>\n<li><p>Markdown的网站编辑器（同时讲解标记用法）</p>\n<ul>\n<li>[x] <a href=\"https://www.zybuluo.com/mdeditor#537850\" target=\"_blank\" rel=\"external\">Cmd Markdown 编辑阅读器</a></li>\n<li>[x] <a href=\"https://pandao.github.io/editor.md/index.html\" target=\"_blank\" rel=\"external\">我经常在这网站上编辑</a></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"举很多栗子\"><a href=\"#举很多栗子\" class=\"headerlink\" title=\"举很多栗子\"></a>举很多栗子</h2><h3 id=\"常用标记\"><a href=\"#常用标记\" class=\"headerlink\" title=\"常用标记\"></a>常用标记</h3><h4 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h4><p>H1-H6：<br> 小标题H4的写法 <code>#### 小标题H4</code></p>\n<h4 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h4><p> <em>斜体的写法:</em><br> <code>*斜体*</code></p>\n<p> <strong>粗体的写法:</strong><br> <code>**粗体**</code></p>\n<p> <s>删除线的写法</s><br> <code>&lt;s&gt;删除线&lt;/s&gt;</code></p>\n<blockquote>\n<p>注明文本的写法 <code>&gt; 注明文本</code></p>\n</blockquote>\n<p> 下标<sub>2</sub>、<br> <code>下标&lt;sub&gt;2&lt;/sub&gt;</code></p>\n<p> 上标<sup>2</sup>、<br> <code>上标&lt;sup&gt;2&lt;/sup&gt;</code></p>\n<h4 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h4><p> <a href=\"https://github.com/tgqnanman\" target=\"_blank\" rel=\"external\">锚点链接</a></p>\n<p> <code>[锚点链接](https://github.com/tgqnanman)</code></p>\n<p> <a href=\"https://github.com\" target=\"_blank\" rel=\"external\">https://github.com</a></p>\n<p> <code>&lt;https://github.com&gt;</code></p>\n<h4 id=\"代码格式\"><a href=\"#代码格式\" class=\"headerlink\" title=\"代码格式\"></a>代码格式</h4> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Hello world!\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"/images/the code format-min.png\" alt=\"code\"></p>\n<h4 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h4><p> 引入图片格式： <code>![picture描述](picture.jpg)</code></p>\n<p> <img src=\"/images/luo hua-min.jpg\" alt=\"落花掌\"></p>\n<blockquote>\n<p>值得一说的是这图片<em>链接地址</em>不能是本地的（就不能是电脑上的文件）、要是网上的图片链接，当然，可以上传到github然后图片地址名为你的图片名 “picture.jpg”就行了</p>\n</blockquote>\n<h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><p> <img src=\"/images/list.png\" alt=\"list\"></p>\n<h4 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h4><p>   <img src=\"/images/table-min.png\" alt=\"table\"></p>\n<h4 id=\"行内代码\"><a href=\"#行内代码\" class=\"headerlink\" title=\"行内代码\"></a>行内代码</h4><p> <img src=\"/images/line%20code.png\" alt=\"line code\"></p>\n","categories":[],"tags":["MEditor.md"]},{"title":"Chrome的调试工具","url":"http://yoursite.com/2016/02/24/Chrome的调试工具/","content":"<h3 id=\"Chrome的调试\"><a href=\"#Chrome的调试\" class=\"headerlink\" title=\"Chrome的调试\"></a><em>Chrome的调试</em></h3><ul>\n<li><strong>Ctrl+shift+C、F12或者右键开发者工具–&gt;打开调试器</strong></li>\n<li><p><strong>调试器的黑色主题</strong></p>\n<ul>\n<li>在chrome商店下载安装主题：<a href=\"https://chrome.google.com/websto … gdgfoefmpeafkjhegbo\" target=\"_blank\" rel=\"external\">安装地址</a></li>\n<li>chrome地址栏输入：<code>chrome://flags</code> 找到<code>experiments</code>关键字：启用开发者工具实验。</li>\n<li>打开调试器（F12），点击设置（setting啥的）：在<code>Experiments</code>中，选中<code>Allow custom UI themes</code>。</li>\n<li>然后重启，打开调试器，你会发现~炫酷的黑色主题</li>\n</ul>\n<hr>\n</li>\n</ul>\n<h4 id=\"有关调试的技巧（自己整理了一下）、来自原创网站\"><a href=\"#有关调试的技巧（自己整理了一下）、来自原创网站\" class=\"headerlink\" title=\"有关调试的技巧（自己整理了一下）、来自原创网站\"></a><strong>有关调试的技巧（自己整理了一下）、来自原创<a href=\"http://seejs.me/2016/03/27/jsdebugger/\" target=\"_blank\" rel=\"external\">网站</a></strong></h4><ul>\n<li><p>内置于Window对象中的alert方法(被玩坏了的) </p>\n<p>  <img src=\"/images/alert.gif\" width=\"400\" height=\"200\"></p>\n</li>\n<li><p>alert调试方式弹出的调试信息，  弹窗会遮挡部分页面内容。另一方面，程序逻辑中添加类似”alert(xxxxx)”这样的语句，会阻碍页面的继续渲染。  现在出现”console.log(xxxx)”的形式，在控制台打印调试信息，而不直接影响页面显示。以IE为例，它看起来像这样：</p>\n<p>   <img src=\"/images/console.gif\" width=\"400\" height=\"200\"></p>\n</li>\n<li><p>好吧，再见丑陋的alert弹出框。而以Chrome浏览器为首的后起之秀，为Console扩展了更丰富的功能：</p>\n<p><img src=\"/images/console.table_.gif\" width=\"400\" height=\"200\"></p>\n</li>\n<li><p>还有一些其的打印功能</p>\n<p><img src=\"/images/consolec.gif\" width=\"400\" height=\"200\"></p>\n</li>\n</ul>\n<ul>\n<li><p><strong>断点调试</strong></p>\n<ul>\n<li><strong>附上调试代码(代码很简单，就是定义一个函数，传入两个数，分别加上一个乱七八糟的随机整数后，再返回两个数的总和。以Chrome开发者工具为例，我们来看一下JS断点调试的基本方法。)：</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;script&gt;</div><div class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'传入实参: a='</span> + a + <span class=\"string\">', b='</span> + b);</div><div class=\"line\">            <span class=\"keyword\">var</span> c = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">10</span>;</div><div class=\"line\">            c = <span class=\"built_in\">parseInt</span>(c);</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'被加的随机数为：'</span> + c);</div><div class=\"line\">            a += c;</div><div class=\"line\">            b += <span class=\"number\">2</span> * c;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'变化后的a、b='</span> + a + <span class=\"string\">', b='</span> + b);</div><div class=\"line\">            <span class=\"keyword\">return</span> a + b;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(sum(<span class=\"number\">10</span>, <span class=\"number\">20</span>));</div><div class=\"line\">    &#125;)();</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>设置断点的作用（查看相应变量的变化<code>图中粉红色区域</code>）</p>\n<p>  <img src=\"/images/breakpoint-sum2.gif\" width=\"500\" height=\"300\"></p>\n</li>\n</ul>\n<ul>\n<li><p>打开Sources面板后其实会在界面中看到如下内容，我们跟着鼠标轨迹逐一看看都是什么意思：</p>\n<p> <img src=\"/images//breakpoint-sum4.gif\" width=\"400\" height=\"70\"></p>\n<p> 从左到右，各个图标表示的功能分别为：</p>\n</li>\n</ul>\n<pre><code>- [x] Pause/Resume script execution：暂停/恢复脚本执行（程序执行到下一断点停止）。\n\n- [x] Step over next function call：执行到下一步的函数调用（跳到下一行）。\n\n- [x] Step into next function call：进入当前函数。\n\n- [x] Step out of current function：跳出当前执行函数。\n\n- [x] Deactive/Active all breakpoints：关闭/开启所有断点（不会取消）。\n\n- [x] Pause on exceptions：异常情况自动断点设置。\n</code></pre><ul>\n<li><p>到此，断点调试的功能键介绍得差不多了，接下来我们就可以一行一行去看我们的程序代码，查看每一行执行完毕之后，我们各个变量的变化情况了，如下图所示：</p>\n<p> <img src=\"/images//breakpoint-sum3.gif\" width=\"500\" height=\"300\"></p>\n<p>  <strong>这里要强调一下，调试过程，先点击右上角的停止按钮，如果还调试不行，就在  左边页面刷新一下，然后如下图：在设置的两个断点间按 F10 便会不断进行下一步</strong></p>\n</li>\n</ul>\n<p> <img src=\"/images/jugelizi.png\" width=\"500\" height=\"300\"></p>\n<ul>\n<li>其余几个功能键，稍微改动一下测试代码，用一张gif图来演示他们的使用方法：</li>\n</ul>\n<p>  <img src=\"/images/breakpoint-sum5.gif\" width=\"500\" height=\"300\"></p>\n<ul>\n<li>DOM断点调试当节点内部子节点变化时断点（Break on subtree modifications）</li>\n</ul>\n<p>  <img src=\"/images/subtree.gif\" width=\"500\" height=\"300\"></p>\n<ul>\n<li>Event Listener Breakpoints事件监听器断点，即根据事件名称进行断点设置。当事件被触发时，断点到事件绑定的位置。事件监听器断点，列出了所有页面及脚本事件，包括：鼠标、键盘、动画、定时器、XHR等等。极大的降低了事件方面业务逻辑的调试难度。演示实例演示了当click事件被触发时和当setTimeout被设置时的断点效果。实例显示，当选中click事件断点之后，两个按钮的被点击时都触发了断点，而当setTimeout被设置时，“Set Timer”断点被触发。</li>\n</ul>\n<p>  <img src=\"/images/subtree.gif\" width=\"500\" height=\"300\"></p>\n<hr>\n<h3 id=\"console的相关方法（整理完都是泪）\"><a href=\"#console的相关方法（整理完都是泪）\" class=\"headerlink\" title=\"console的相关方法（整理完都是泪）\"></a>console的相关方法（整理完都是泪）</h3><ul>\n<li><p>console.log() 接收不定参数，参数间用逗号分隔，最终会输出会将它们以空白字符连接。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hi'</span>,<span class=\"string\">'hello'</span>)  </div><div class=\"line\"><span class=\"comment\">//hi hello</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>控制台（表格形式输出）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> data = [&#123;<span class=\"string\">'品名'</span>: <span class=\"string\">'杜雷斯'</span>, <span class=\"string\">'数量'</span>: <span class=\"number\">4</span>&#125;, &#123;<span class=\"string\">'品名'</span>: <span class=\"string\">'冈本'</span>, <span class=\"string\">'数量'</span>: <span class=\"number\">3</span>&#125;];</div><div class=\"line\"><span class=\"built_in\">console</span>.table(data);</div></pre></td></tr></table></figure>\n</li>\n<li><p>控制台（条件判断输出）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.assert(<span class=\"number\">3</span>&gt;<span class=\"number\">2</span>,<span class=\"string\">'不满足条件'</span>)  </div><div class=\"line\"><span class=\"comment\">//undefined</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>控制台（程序运行时间）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'ddd'</span>) </div><div class=\"line\"><span class=\"keyword\">var</span> dd = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ddd</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">1</span>+<span class=\"number\">3</span>;&#125;(); </div><div class=\"line\">dd; </div><div class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'ddd'</span>)</div><div class=\"line\"><span class=\"comment\">//ddd:0.032ms</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'ddd'</span>);</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dd</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">1</span>+<span class=\"number\">3</span>;&#125;)();</div><div class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'ddd'</span>);</div><div class=\"line\"><span class=\"comment\">//ddd: 0.022ms</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>如果不用内置console.time的话：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> start=<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime();</div><div class=\"line\"><span class=\"keyword\">var</span> array= <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">1000000</span>);</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = array.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123; </div><div class=\"line\">array[i] = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()-start);</div><div class=\"line\"><span class=\"comment\">//236</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>console.log(Date()) </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Sun Oct 16 2016 22:21:36 GMT+0800 (中国标准时间)</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>shift+Enter可以使控制台换行</p>\n</li>\n<li><p>控制台（返回属性名组成的数组和属性值的数组）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tboy=&#123;<span class=\"attr\">name</span>:<span class=\"string\">'wayou'</span>,<span class=\"attr\">gender</span>:<span class=\"string\">'unknown'</span>,<span class=\"attr\">hobby</span>:<span class=\"string\">'opposite to the gender'</span>&#125;;</div><div class=\"line\">keys(tboy);</div><div class=\"line\"><span class=\"comment\">//[\"name\",    \"gender\",\"hobby\"]</span></div><div class=\"line\">values(tboy);</div><div class=\"line\"><span class=\"comment\">//[\"wayou\", \"unknown\", \"opposite to the gender\"]</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>格式化打印{ }<ul>\n<li>Chrome的开发者工具有一段嵌入的美化代码，它可以帮你返回一段最小化的且格式易读的代码。这个漂亮的印刷按钮在你正确打开文件之后的Sources标签下的左下角。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"最后扯两句，这chrome-md文件-整理的有点苦逼，不想再commit更新了！！！\"><a href=\"#最后扯两句，这chrome-md文件-整理的有点苦逼，不想再commit更新了！！！\" class=\"headerlink\" title=\"最后扯两句，这chrome.md文件 整理的有点苦逼，不想再commit更新了！！！\"></a>最后扯两句，这chrome.md文件 整理的有点苦逼，不想再commit更新了！！！</h3>","categories":[],"tags":["chrome"]},{"title":"git-bash总结","url":"http://yoursite.com/2016/02/17/git-bash总结/","content":"<h4 id=\"Git-Bash软件基础命令\"><a href=\"#Git-Bash软件基础命令\" class=\"headerlink\" title=\"Git Bash软件基础命令:\"></a>Git Bash软件基础命令:</h4><h5 id=\"零、建立本地与远程仓库的连接\"><a href=\"#零、建立本地与远程仓库的连接\" class=\"headerlink\" title=\"零、建立本地与远程仓库的连接\"></a>零、建立本地与远程仓库的连接</h5><p><code>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code><br>本地找到.ssh目录，有id_rsa和id_rsa.pub两个文件，SSH Key的秘钥对，id_rsa是私钥，id_rsa.pub是公钥，可以放心地告诉任何人。登陆GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容。</p>\n<h5 id=\"一、创建空目录\"><a href=\"#一、创建空目录\" class=\"headerlink\" title=\"一、创建空目录\"></a>一、创建空目录</h5><ul>\n<li><p><code>mkdir newFile</code>    新建一个文件夹</p>\n</li>\n<li><p><code>cd newFile</code>      进入文件夹</p>\n</li>\n</ul>\n<p><code>pwd</code>    显示当前目录</p>\n<hr>\n<h5 id=\"二、本地创建版本库（repository）\"><a href=\"#二、本地创建版本库（repository）\" class=\"headerlink\" title=\"二、本地创建版本库（repository）\"></a>二、本地创建版本库（repository）</h5><ul>\n<li><code>git init</code>    newFile文件夹内有一个.git的目录，这个目录是Git来跟踪管理版本库的</li>\n</ul>\n<p><del>Initialized empty Git repository in /Users/TGQ/newFile/.git/</del></p>\n<p><code>ls -ah</code>     .git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见</p>\n<hr>\n<h5 id=\"三、提交文件到版本库\"><a href=\"#三、提交文件到版本库\" class=\"headerlink\" title=\"三、提交文件到版本库\"></a>三、提交文件到版本库</h5><ul>\n<li><p><code>git add .</code>   （添加到工作区）</p>\n</li>\n<li><p><code>git commit -m &quot;提交的备注&quot;</code>   （提交到暂存区）</p>\n</li>\n</ul>\n<p><code>git status</code>    掌握仓库当前的状态（文件被修改过）</p>\n<p><code>git diff</code>      查看修改内容</p>\n<hr>\n<h5 id=\"四、版本回退\"><a href=\"#四、版本回退\" class=\"headerlink\" title=\"四、版本回退\"></a>四、版本回退</h5><ul>\n<li><p><code>git log</code>     提交日志</p>\n</li>\n<li><p><code>git reset --hard HEAD^（或者是commit_id）</code>  回退上一个版本</p>\n</li>\n</ul>\n<p><code>git reflog</code>  命令历史</p>\n<p><code>cat  readme.txt</code>   查看txt文件内容</p>\n<p>在Git中，用<code>HEAD</code>表示当前版本，上一个版本就是<code>HEAD^</code>，上上一个版本就是<code>HEAD^^</code></p>\n<hr>\n<h5 id=\"五、工作区与暂存区\"><a href=\"#五、工作区与暂存区\" class=\"headerlink\" title=\"五、工作区与暂存区\"></a>五、工作区与暂存区</h5><p>工作区（<strong>文件夹</strong>）有一个隐藏目录<strong>.git</strong>，这个不算工作区，而是Git的版本库。</p>\n<p>Git的版本库里存了很多东西，其中最重要的就是称为<strong>stage</strong>（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<strong>master</strong>，以及指向master的一个指针叫HEAD。</p>\n<p><img src=\"/images/提交.jpg\" alt=\"\"></p>\n<p><code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p>\n<p>一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的<code>git status</code>：</p>\n<p><img src=\"/images/stage空.jpg\" alt=\"\"></p>\n<h5 id=\"六、撤销修改\"><a href=\"#六、撤销修改\" class=\"headerlink\" title=\"六、撤销修改\"></a>六、撤销修改</h5><ol>\n<li><p><code>git checkout -- file</code>  可以丢弃工作区的修改</p>\n</li>\n<li><p><code>git reset HEAD file</code>   ==》 1     可以丢弃暂存区的修改</p>\n</li>\n<li><p>版本回 退：提交了不合适的修改到版本库时，想要撤销本次提交</p>\n</li>\n</ol>\n<h5 id=\"七、删除文件\"><a href=\"#七、删除文件\" class=\"headerlink\" title=\"七、删除文件\"></a>七、删除文件</h5><ol>\n<li><p>从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code></p>\n</li>\n<li><p><code>git checkout</code>   用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”</p>\n</li>\n</ol>\n<h5 id=\"八、远程库的管理\"><a href=\"#八、远程库的管理\" class=\"headerlink\" title=\"八、远程库的管理\"></a>八、远程库的管理</h5><p><code>git remote add origin git@server-name:path/repo-name.git</code>   关联远程库</p>\n<p><code>git push -u origin master</code>    第一次推送master分支的内容到远程库</p>\n<p><code>git push origin maste</code>   之后推送最新修改；</p>\n<h5 id=\"九、克隆远程库\"><a href=\"#九、克隆远程库\" class=\"headerlink\" title=\"九、克隆远程库\"></a>九、克隆远程库</h5><p><code>git clone git@github.tgqnnanman/kkkk.git</code>    这里是用的ssh协议，也有https可选</p>\n<h5 id=\"十、杂杂的\"><a href=\"#十、杂杂的\" class=\"headerlink\" title=\"十、杂杂的\"></a>十、杂杂的</h5><p>######<strong>偷懒命令</strong></p>\n<ul>\n<li><code>git lg</code> 提交的情况-别名</li>\n</ul>\n<p><code>git config --global alias.lg &quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</code></p>\n<ul>\n<li><code>git last</code>   最后一次提交情况-别名</li>\n</ul>\n<p><code>git config --global alias.last &#39;log -1&#39;</code></p>\n<p><img src=\"/images/bieming01.png\" alt=\"\"><br><img src=\"/images/bieming02.png\" alt=\"\"></p>\n<h5 id=\"分支系列命令分支系列命令\"><a href=\"#分支系列命令分支系列命令\" class=\"headerlink\" title=\"分支系列命令分支系列命令\"></a>分支系列命令分支系列命令</h5><p>查看分支：<code>git branch</code></p>\n<p>创建分支：<code>git branch &lt;name&gt;</code></p>\n<p>切换分支：<code>git checkout &lt;name&gt;</code></p>\n<p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p>\n<p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p>\n<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>\n<h6 id=\"在分支提交到远程库部骤：\"><a href=\"#在分支提交到远程库部骤：\" class=\"headerlink\" title=\"在分支提交到远程库部骤：\"></a>在分支提交到远程库部骤：</h6><p><code>git add.</code>  =&gt;  <code>git commit -m &quot;注释&quot;</code>  =&gt;  <code>git push origin &lt;当前分支名&gt;</code></p>\n","categories":[],"tags":["git"]},{"title":"webstorm与sublime","url":"http://yoursite.com/2016/02/12/编辑器配置/","content":"<h2 id=\"sublime的配置\"><a href=\"#sublime的配置\" class=\"headerlink\" title=\"sublime的配置\"></a>sublime的配置</h2><h3 id=\"软件的下载与注册\"><a href=\"#软件的下载与注册\" class=\"headerlink\" title=\"软件的下载与注册\"></a>软件的下载与注册</h3><p>在官网下载sublime text3之后，有需要就网上找注册码.<br>然后在 HELP–&gt;Licence 黏贴你的注册码就行了。</p>\n<h3 id=\"安装install-package\"><a href=\"#安装install-package\" class=\"headerlink\" title=\"安装install package\"></a>安装install package</h3><ul>\n<li><p>打开控制台(一般是CTRL+’) （适用于 Sublime Text3） 然后复制黏贴代码(google)</p>\n</li>\n<li><p>测试是否成功安装<br>ctrl+shift+p输入ins可进（prefense、）<br><br><br><strong><em>安装插件都是ctrl+shift+p，再输入ins，确定之后，再输入你要安装的插件名称，点击完之后，等待sublime最下面的显示安装进度，再重启就行了</em></strong><br><br></p>\n</li>\n</ul>\n<h3 id=\"汉化\"><a href=\"#汉化\" class=\"headerlink\" title=\"汉化\"></a>汉化</h3><ul>\n<li>ctrl+shift+p</li>\n<li>安装插件chinese</li>\n<li>然后重启，在HELP–&gt;Language切换中文</li>\n</ul>\n<h3 id=\"设置html文件在浏览器中快捷打开\"><a href=\"#设置html文件在浏览器中快捷打开\" class=\"headerlink\" title=\"设置html文件在浏览器中快捷打开\"></a>设置html文件在浏览器中快捷打开</h3><ul>\n<li>安装插件 view in browser</li>\n<li>在SublimeText下打开该路径：preferen</li>\n<li>按键绑定-用户</li>\n<li>在” ] “前输入以下代码：<br>{ “keys”: [“ctrl+你想要设置的键（字母B，A啥的都可以）”], “command”: “open_in_browser” }</li>\n</ul>\n<h3 id=\"如何快速创建html头部格式文件\"><a href=\"#如何快速创建html头部格式文件\" class=\"headerlink\" title=\"如何快速创建html头部格式文件\"></a>如何快速创建html头部格式文件</h3><ul>\n<li>安装插件：ement</li>\n<li>创建时：先CTRIL+N，创建一个文件先，然后CTRL+S保存文件（命名为xx.html）</li>\n<li>然后空文件输入 html:5 </li>\n<li>最后按一下Tab键<br>如图：<br><img src=\"/images/automatic.png\" alt=\"html自动头部生成\"></li>\n</ul>\n<h3 id=\"6-css颜色框\"><a href=\"#6-css颜色框\" class=\"headerlink\" title=\"6.css颜色框\"></a>6.css颜色框</h3><ul>\n<li>安装color picker插件</li>\n<li>进入prefence 打开 window default</li>\n<li>这里是设置快捷键打开：<br>{ “keys”: [“ctrl+j”], “command”: “color_pick” }</li>\n</ul>\n<h3 id=\"左侧目录树的显示\"><a href=\"#左侧目录树的显示\" class=\"headerlink\" title=\"左侧目录树的显示\"></a>左侧目录树的显示</h3><ul>\n<li>安装插件 advanceNewFile</li>\n<li>安装完之后，同样和别的安装插件步骤一样，重启。再在 sublime左上角的‘文件’ 选项里，选择 ‘文件夹’ ，再任意打开一个文件夹就行了</li>\n</ul>\n<h3 id=\"代码提示（例如back-然后提示background）\"><a href=\"#代码提示（例如back-然后提示background）\" class=\"headerlink\" title=\"代码提示（例如back 然后提示background）\"></a>代码提示（例如back 然后提示background）</h3><ul>\n<li>安装插件SublimeCodeIntel</li>\n</ul>\n<h3 id=\"格式化html-css-js代码（也就是排列整齐）（还要安装node这里就不详说了）\"><a href=\"#格式化html-css-js代码（也就是排列整齐）（还要安装node这里就不详说了）\" class=\"headerlink\" title=\"格式化html/css/js代码（也就是排列整齐）（还要安装node这里就不详说了）\"></a>格式化html/css/js代码（也就是排列整齐）（还要安装node这里就不详说了）</h3><ul>\n<li>安装插件 html/css/js prettify</li>\n<li>进入此插件的 set plugin options</li>\n<li>设置路径：”node_path”: {<br>  例如我自己的路径：<br>  “windows”: “E:/学习/sublime text3/Sublime Text 3/Packages/node.exe”,</li>\n<li>测试，全选要格式化的代码，然后右键，Prettify code</li>\n</ul>\n<h3 id=\"平时一些偷懒操作\"><a href=\"#平时一些偷懒操作\" class=\"headerlink\" title=\"平时一些偷懒操作\"></a>平时一些偷懒操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">输入          div*2 </div><div class=\"line\">再按          Tab键</div><div class=\"line\">会出现 \t&lt;div&gt;&lt;/div&gt;</div><div class=\"line\">\t   &lt;div&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n<ul>\n<li>类似的还有：<br>E元素名（div、p）；<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>id和class可以连着写，div#content.column<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"content\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"column\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>E<em>N多项元素（ul#nav&gt;li</em>5&gt;a）<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"nav\"</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>还有的类似，慢慢就懒懂起来的了~~</p>\n<ul>\n<li>代码缩进：ctrl+ {</li>\n<li>万一不小心把菜单栏弄隐藏了：<br>调出顶部菜单栏：ctrl+shift+p、再输view</li>\n</ul>\n<h3 id=\"有些时候要设置Path路径，就是自己的文件夹名字改变等等之类的\"><a href=\"#有些时候要设置Path路径，就是自己的文件夹名字改变等等之类的\" class=\"headerlink\" title=\"有些时候要设置Path路径，就是自己的文件夹名字改变等等之类的\"></a>有些时候要设置Path路径，就是自己的文件夹名字改变等等之类的</h3><p>例如我自己的（其中注意路径的斜杠是反着的 \\）：</p>\n<ul>\n<li>sublimetext会有提示更改软件里的path</li>\n<li>更改系统变量Path:</li>\n</ul>\n<p>E:\\学习\\sublime text3\\Sublime Text 3\\Packages\\node_modules\\npm\\bin</p>\n<p>E:\\学习\\sublime text3\\Sublime Text 3\\Packages</p>\n<h2 id=\"webstorm的配置\"><a href=\"#webstorm的配置\" class=\"headerlink\" title=\"webstorm的配置\"></a><strong>webstorm的配置</strong></h2><h3 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h3><ul>\n<li>官网下载2016.2版本，然后破解的话，网上搜注册码激活咯</li>\n</ul>\n<h3 id=\"主题导入\"><a href=\"#主题导入\" class=\"headerlink\" title=\"主题导入\"></a>主题导入</h3><ul>\n<li>File–&gt;import settings–&gt;选择文件：自己下载的本地文件 <em>settings.jar</em></li>\n</ul>\n<h3 id=\"代码和界面的同步编写\"><a href=\"#代码和界面的同步编写\" class=\"headerlink\" title=\"代码和界面的同步编写\"></a>代码和界面的同步编写</h3><ul>\n<li>先在chrome安装JetBrains IDE Support插件</li>\n<li>然后打开webstorm软件，右键Debugger(然后会自动弹出google浏览器（default的浏览器），在webstorm上编代码，浏览器都会同步更改)</li>\n</ul>\n","categories":[],"tags":["编辑器配置"]},{"title":"blog常用命令","url":"http://yoursite.com/2016/01/26/blog常用命令/","content":"<h3 id=\"主要配置文件：\"><a href=\"#主要配置文件：\" class=\"headerlink\" title=\"主要配置文件：\"></a>主要配置文件：</h3><ul>\n<li>在根目录下的<br>_config.yml  (主配置)<br>themes  =&gt;  theme  =&gt;  _config.yml  (theme配置)<br>source  =&gt;  _posts  (md文件存放)</li>\n</ul>\n<h3 id=\"用到的git命令\"><a href=\"#用到的git命令\" class=\"headerlink\" title=\"用到的git命令\"></a>用到的git命令</h3><ul>\n<li><p>生成新的md文件： <code>hexo n &#39;filename&#39;</code></p>\n</li>\n<li><p>整合静态文件(生成public文件夹)： <code>hexo g</code></p>\n</li>\n<li><p>本地预览： <code>hexo server</code></p>\n</li>\n<li><p>终止预览： <code>Ctrl + C</code></p>\n</li>\n<li><p>部署到远端仓库：  <code>hexo deploy</code></p>\n</li>\n<li><p>远端不显示可键入(命令删除public)再g d:  <code>hexo clean</code></p>\n</li>\n</ul>\n<h3 id=\"踩到的坑：\"><a href=\"#踩到的坑：\" class=\"headerlink\" title=\"踩到的坑：\"></a>踩到的坑：</h3><ul>\n<li><p>格式问题<br>一定要注意xml配置格式，有空格，然后别的照着弄就好了</p>\n</li>\n<li><p>md文件头设置评论与否(注意空格)：<br>comments: false</p>\n</li>\n<li><p>端口被占用<br>如果您想要更改端口，或是在执行时遇到了 EADDRINUSE 错误，可以在执行时使用 -p 选项指定其他端口，如下：<br><code>hexo server -p 5000</code></p>\n</li>\n<li><p>时不时提交登录一下：<br>当你ssh密钥等都认为弄好了后，以下命令有所帮助<br><code>git init</code> 弹出登录一次后估计就能保存了</p>\n</li>\n</ul>\n<p>如果还解决不了，砸电脑吧 <img src=\"/images/砸电脑-min.jpg\" width=\"50\" height=\"40\"></p>\n","categories":[],"tags":["blog"]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"<h4 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a><strong>关于我</strong></h4><p>爱生活，爱编程，虽然整天写bug，因仰望大牛们而不断学习，其实对代码还是挺喜欢的，会一直坚持下去，向着工程师而努力、</p>\n<h4 id=\"关于博客文\"><a href=\"#关于博客文\" class=\"headerlink\" title=\"关于博客文\"></a>关于博客文</h4><p>或者你会想，这都什么时代了，还玩博客，都没有看的了，但我只想说：能有个自己的地方能记录自己平时编程踩的坑（无限bug），资源和学习成果，同时对动漫，novel或者啥的都有些分享在这里、毕竟写出来&gt;说出来&gt;想出来。</p>\n<h4 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h4><p>github：<a href=\"https://github.com/tgqnanman\" target=\"_blank\" rel=\"external\">https://github.com/tgqnanman</a><br>email：tgq.nanman@gmail.com<br>qq：934383930</p>\n","categories":[],"tags":[]},{"title":"categories","url":"http://yoursite.com/categories/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"tags","url":"http://yoursite.com/tags/index.html","content":"","categories":[],"tags":[]}]